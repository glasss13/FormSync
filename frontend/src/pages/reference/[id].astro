---
import type { GetStaticPaths } from "astro";
import Layout from "../../layouts/Layout.astro";
import { references } from "../../utils";

export const getStaticPaths = (() => {
  return references.map((_, idx) => ({
    params: {
      id: idx,
    },
  }));
}) satisfies GetStaticPaths;

const { id } = Astro.params;
const reference = references[id];
const apiUrlForForm = `http://localhost:5000/${id}`;
---

<Layout title={`Upload Video for ID: ${id}`}>
  <div class="container mx-auto p-4">
    <header class="mb-8 text-center">
      <h1 class="text-3xl font-bold text-gray-800">Video Upload</h1>
      <p class="text-gray-600">
        Reference ID: <span class="font-semibold">{id}</span>
      </p>
    </header>

    {
      reference ? (
        <div class="bg-gray-100 p-4 rounded-lg shadow mb-6">
          <h2 class="text-xl font-semibold text-gray-700 mb-2">
            Reference Details
          </h2>
          {/* Displaying reference details; customize as needed */}
          <pre class="bg-white p-3 rounded text-sm overflow-x-auto">
            {JSON.stringify(reference, null, 2)}
          </pre>
        </div>
      ) : (
        <p class="text-center text-red-500 mb-6">
          Reference data not found for ID: {id}.
        </p>
      )
    }

    <section class="bg-white p-6 rounded-lg shadow-md">
      <h2 class="text-2xl font-semibold text-gray-700 mb-4">
        Upload Your Video
      </h2>
      <form id="videoUploadForm" class="space-y-4">
        <div>
          <label
            for="videoFile"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Select video file:</label
          >
          <input
            type="file"
            id="videoFile"
            name="videoFile"
            accept="video/*"
            required
            class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
          />
        </div>
        <button
          type="submit"
          class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline transition duration-150 ease-in-out"
        >
          Upload Video
        </button>
      </form>
      <div id="responseMessage" class="mt-4 text-sm">
        {/* Messages from the server will appear here */}
      </div>
    </section>
  </div>

  <script define:vars={{ apiUrl: apiUrlForForm }}>
    // Client-side script to handle form submission
    const videoUploadForm = document.getElementById("videoUploadForm");
    const videoFileInput = document.getElementById("videoFile");
    const responseMessageDiv = document.getElementById("responseMessage");

    if (videoUploadForm && videoFileInput && responseMessageDiv) {
      videoUploadForm.addEventListener("submit", async event => {
        event.preventDefault(); // Prevent default form submission

        const file = videoFileInput.files[0];
        if (!file) {
          responseMessageDiv.textContent = "Please select a video file.";
          responseMessageDiv.className = "mt-4 text-sm text-red-600";
          return;
        }

        // Create FormData and append the file
        // The field name "file" matches the cURL example's -F "file=@..."
        const formData = new FormData();
        formData.append("file", file);

        responseMessageDiv.textContent = "Uploading...";
        responseMessageDiv.className = "mt-4 text-sm text-blue-600";

        try {
          const response = await fetch(apiUrl, {
            // apiUrl is passed from define:vars
            method: "POST",
            body: formData,
            // Headers are generally not needed for FormData with fetch,
            // as the browser sets 'Content-Type': 'multipart/form-data' automatically.
          });

          const responseData = await response.json(); // Assuming the server responds with JSON

          if (response.ok) {
            responseMessageDiv.textContent = `Upload successful! Server response: ${JSON.stringify(responseData)}`;
            responseMessageDiv.className = "mt-4 text-sm text-green-600";
            videoUploadForm.reset(); // Clear the form
          } else {
            responseMessageDiv.textContent = `Upload failed: ${responseData.message || response.statusText}`;
            responseMessageDiv.className = "mt-4 text-sm text-red-600";
          }
        } catch (error) {
          console.error("Error uploading file:", error);
          responseMessageDiv.textContent = `An error occurred: ${error.message}`;
          responseMessageDiv.className = "mt-4 text-sm text-red-600";
        }
      });
    } else {
      console.error("Required form elements not found in the DOM.");
    }
  </script>
</Layout>
